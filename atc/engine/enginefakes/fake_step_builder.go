// Code generated by counterfeiter. DO NOT EDIT.
package enginefakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
	"github.com/concourse/concourse/atc/engine"
	"github.com/concourse/concourse/atc/exec"
)

type FakeStepBuilder struct {
	BuildStepperStub        func(db.Build) (exec.Stepper, error)
	buildStepperMutex       sync.RWMutex
	buildStepperArgsForCall []struct {
		arg1 db.Build
	}
	buildStepperReturns struct {
		result1 exec.Stepper
		result2 error
	}
	buildStepperReturnsOnCall map[int]struct {
		result1 exec.Stepper
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStepBuilder) BuildStepper(arg1 db.Build) (exec.Stepper, error) {
	fake.buildStepperMutex.Lock()
	ret, specificReturn := fake.buildStepperReturnsOnCall[len(fake.buildStepperArgsForCall)]
	fake.buildStepperArgsForCall = append(fake.buildStepperArgsForCall, struct {
		arg1 db.Build
	}{arg1})
	fake.recordInvocation("BuildStepper", []interface{}{arg1})
	fake.buildStepperMutex.Unlock()
	if fake.BuildStepperStub != nil {
		return fake.BuildStepperStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.buildStepperReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStepBuilder) BuildStepperCallCount() int {
	fake.buildStepperMutex.RLock()
	defer fake.buildStepperMutex.RUnlock()
	return len(fake.buildStepperArgsForCall)
}

func (fake *FakeStepBuilder) BuildStepperCalls(stub func(db.Build) (exec.Stepper, error)) {
	fake.buildStepperMutex.Lock()
	defer fake.buildStepperMutex.Unlock()
	fake.BuildStepperStub = stub
}

func (fake *FakeStepBuilder) BuildStepperArgsForCall(i int) db.Build {
	fake.buildStepperMutex.RLock()
	defer fake.buildStepperMutex.RUnlock()
	argsForCall := fake.buildStepperArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStepBuilder) BuildStepperReturns(result1 exec.Stepper, result2 error) {
	fake.buildStepperMutex.Lock()
	defer fake.buildStepperMutex.Unlock()
	fake.BuildStepperStub = nil
	fake.buildStepperReturns = struct {
		result1 exec.Stepper
		result2 error
	}{result1, result2}
}

func (fake *FakeStepBuilder) BuildStepperReturnsOnCall(i int, result1 exec.Stepper, result2 error) {
	fake.buildStepperMutex.Lock()
	defer fake.buildStepperMutex.Unlock()
	fake.BuildStepperStub = nil
	if fake.buildStepperReturnsOnCall == nil {
		fake.buildStepperReturnsOnCall = make(map[int]struct {
			result1 exec.Stepper
			result2 error
		})
	}
	fake.buildStepperReturnsOnCall[i] = struct {
		result1 exec.Stepper
		result2 error
	}{result1, result2}
}

func (fake *FakeStepBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildStepperMutex.RLock()
	defer fake.buildStepperMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStepBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ engine.StepBuilder = new(FakeStepBuilder)
