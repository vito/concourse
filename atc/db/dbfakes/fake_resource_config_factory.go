// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"
	"time"

	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/atc/db"
)

type FakeResourceConfigFactory struct {
	CleanUnreferencedConfigsStub        func(time.Duration) error
	cleanUnreferencedConfigsMutex       sync.RWMutex
	cleanUnreferencedConfigsArgsForCall []struct {
		arg1 time.Duration
	}
	cleanUnreferencedConfigsReturns struct {
		result1 error
	}
	cleanUnreferencedConfigsReturnsOnCall map[int]struct {
		result1 error
	}
	FindOrCreateResourceConfigStub        func(string, atc.Source, atc.VersionedResourceTypes) (db.ResourceConfig, error)
	findOrCreateResourceConfigMutex       sync.RWMutex
	findOrCreateResourceConfigArgsForCall []struct {
		arg1 string
		arg2 atc.Source
		arg3 atc.VersionedResourceTypes
	}
	findOrCreateResourceConfigReturns struct {
		result1 db.ResourceConfig
		result2 error
	}
	findOrCreateResourceConfigReturnsOnCall map[int]struct {
		result1 db.ResourceConfig
		result2 error
	}
	FindResourceConfigByIDStub        func(int) (db.ResourceConfig, bool, error)
	findResourceConfigByIDMutex       sync.RWMutex
	findResourceConfigByIDArgsForCall []struct {
		arg1 int
	}
	findResourceConfigByIDReturns struct {
		result1 db.ResourceConfig
		result2 bool
		result3 error
	}
	findResourceConfigByIDReturnsOnCall map[int]struct {
		result1 db.ResourceConfig
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceConfigFactory) CleanUnreferencedConfigs(arg1 time.Duration) error {
	fake.cleanUnreferencedConfigsMutex.Lock()
	ret, specificReturn := fake.cleanUnreferencedConfigsReturnsOnCall[len(fake.cleanUnreferencedConfigsArgsForCall)]
	fake.cleanUnreferencedConfigsArgsForCall = append(fake.cleanUnreferencedConfigsArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("CleanUnreferencedConfigs", []interface{}{arg1})
	fake.cleanUnreferencedConfigsMutex.Unlock()
	if fake.CleanUnreferencedConfigsStub != nil {
		return fake.CleanUnreferencedConfigsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cleanUnreferencedConfigsReturns
	return fakeReturns.result1
}

func (fake *FakeResourceConfigFactory) CleanUnreferencedConfigsCallCount() int {
	fake.cleanUnreferencedConfigsMutex.RLock()
	defer fake.cleanUnreferencedConfigsMutex.RUnlock()
	return len(fake.cleanUnreferencedConfigsArgsForCall)
}

func (fake *FakeResourceConfigFactory) CleanUnreferencedConfigsCalls(stub func(time.Duration) error) {
	fake.cleanUnreferencedConfigsMutex.Lock()
	defer fake.cleanUnreferencedConfigsMutex.Unlock()
	fake.CleanUnreferencedConfigsStub = stub
}

func (fake *FakeResourceConfigFactory) CleanUnreferencedConfigsArgsForCall(i int) time.Duration {
	fake.cleanUnreferencedConfigsMutex.RLock()
	defer fake.cleanUnreferencedConfigsMutex.RUnlock()
	argsForCall := fake.cleanUnreferencedConfigsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceConfigFactory) CleanUnreferencedConfigsReturns(result1 error) {
	fake.cleanUnreferencedConfigsMutex.Lock()
	defer fake.cleanUnreferencedConfigsMutex.Unlock()
	fake.CleanUnreferencedConfigsStub = nil
	fake.cleanUnreferencedConfigsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigFactory) CleanUnreferencedConfigsReturnsOnCall(i int, result1 error) {
	fake.cleanUnreferencedConfigsMutex.Lock()
	defer fake.cleanUnreferencedConfigsMutex.Unlock()
	fake.CleanUnreferencedConfigsStub = nil
	if fake.cleanUnreferencedConfigsReturnsOnCall == nil {
		fake.cleanUnreferencedConfigsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanUnreferencedConfigsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfig(arg1 string, arg2 atc.Source, arg3 atc.VersionedResourceTypes) (db.ResourceConfig, error) {
	fake.findOrCreateResourceConfigMutex.Lock()
	ret, specificReturn := fake.findOrCreateResourceConfigReturnsOnCall[len(fake.findOrCreateResourceConfigArgsForCall)]
	fake.findOrCreateResourceConfigArgsForCall = append(fake.findOrCreateResourceConfigArgsForCall, struct {
		arg1 string
		arg2 atc.Source
		arg3 atc.VersionedResourceTypes
	}{arg1, arg2, arg3})
	fake.recordInvocation("FindOrCreateResourceConfig", []interface{}{arg1, arg2, arg3})
	fake.findOrCreateResourceConfigMutex.Unlock()
	if fake.FindOrCreateResourceConfigStub != nil {
		return fake.FindOrCreateResourceConfigStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findOrCreateResourceConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigCallCount() int {
	fake.findOrCreateResourceConfigMutex.RLock()
	defer fake.findOrCreateResourceConfigMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigCalls(stub func(string, atc.Source, atc.VersionedResourceTypes) (db.ResourceConfig, error)) {
	fake.findOrCreateResourceConfigMutex.Lock()
	defer fake.findOrCreateResourceConfigMutex.Unlock()
	fake.FindOrCreateResourceConfigStub = stub
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigArgsForCall(i int) (string, atc.Source, atc.VersionedResourceTypes) {
	fake.findOrCreateResourceConfigMutex.RLock()
	defer fake.findOrCreateResourceConfigMutex.RUnlock()
	argsForCall := fake.findOrCreateResourceConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigReturns(result1 db.ResourceConfig, result2 error) {
	fake.findOrCreateResourceConfigMutex.Lock()
	defer fake.findOrCreateResourceConfigMutex.Unlock()
	fake.FindOrCreateResourceConfigStub = nil
	fake.findOrCreateResourceConfigReturns = struct {
		result1 db.ResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigReturnsOnCall(i int, result1 db.ResourceConfig, result2 error) {
	fake.findOrCreateResourceConfigMutex.Lock()
	defer fake.findOrCreateResourceConfigMutex.Unlock()
	fake.FindOrCreateResourceConfigStub = nil
	if fake.findOrCreateResourceConfigReturnsOnCall == nil {
		fake.findOrCreateResourceConfigReturnsOnCall = make(map[int]struct {
			result1 db.ResourceConfig
			result2 error
		})
	}
	fake.findOrCreateResourceConfigReturnsOnCall[i] = struct {
		result1 db.ResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) FindResourceConfigByID(arg1 int) (db.ResourceConfig, bool, error) {
	fake.findResourceConfigByIDMutex.Lock()
	ret, specificReturn := fake.findResourceConfigByIDReturnsOnCall[len(fake.findResourceConfigByIDArgsForCall)]
	fake.findResourceConfigByIDArgsForCall = append(fake.findResourceConfigByIDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("FindResourceConfigByID", []interface{}{arg1})
	fake.findResourceConfigByIDMutex.Unlock()
	if fake.FindResourceConfigByIDStub != nil {
		return fake.FindResourceConfigByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.findResourceConfigByIDReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeResourceConfigFactory) FindResourceConfigByIDCallCount() int {
	fake.findResourceConfigByIDMutex.RLock()
	defer fake.findResourceConfigByIDMutex.RUnlock()
	return len(fake.findResourceConfigByIDArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindResourceConfigByIDCalls(stub func(int) (db.ResourceConfig, bool, error)) {
	fake.findResourceConfigByIDMutex.Lock()
	defer fake.findResourceConfigByIDMutex.Unlock()
	fake.FindResourceConfigByIDStub = stub
}

func (fake *FakeResourceConfigFactory) FindResourceConfigByIDArgsForCall(i int) int {
	fake.findResourceConfigByIDMutex.RLock()
	defer fake.findResourceConfigByIDMutex.RUnlock()
	argsForCall := fake.findResourceConfigByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceConfigFactory) FindResourceConfigByIDReturns(result1 db.ResourceConfig, result2 bool, result3 error) {
	fake.findResourceConfigByIDMutex.Lock()
	defer fake.findResourceConfigByIDMutex.Unlock()
	fake.FindResourceConfigByIDStub = nil
	fake.findResourceConfigByIDReturns = struct {
		result1 db.ResourceConfig
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceConfigFactory) FindResourceConfigByIDReturnsOnCall(i int, result1 db.ResourceConfig, result2 bool, result3 error) {
	fake.findResourceConfigByIDMutex.Lock()
	defer fake.findResourceConfigByIDMutex.Unlock()
	fake.FindResourceConfigByIDStub = nil
	if fake.findResourceConfigByIDReturnsOnCall == nil {
		fake.findResourceConfigByIDReturnsOnCall = make(map[int]struct {
			result1 db.ResourceConfig
			result2 bool
			result3 error
		})
	}
	fake.findResourceConfigByIDReturnsOnCall[i] = struct {
		result1 db.ResourceConfig
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceConfigFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanUnreferencedConfigsMutex.RLock()
	defer fake.cleanUnreferencedConfigsMutex.RUnlock()
	fake.findOrCreateResourceConfigMutex.RLock()
	defer fake.findOrCreateResourceConfigMutex.RUnlock()
	fake.findResourceConfigByIDMutex.RLock()
	defer fake.findResourceConfigByIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceConfigFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceConfigFactory = new(FakeResourceConfigFactory)
