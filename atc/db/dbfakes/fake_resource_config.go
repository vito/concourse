// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
)

type FakeResourceConfig struct {
	CreatedByBaseResourceTypeStub        func() *db.UsedBaseResourceType
	createdByBaseResourceTypeMutex       sync.RWMutex
	createdByBaseResourceTypeArgsForCall []struct {
	}
	createdByBaseResourceTypeReturns struct {
		result1 *db.UsedBaseResourceType
	}
	createdByBaseResourceTypeReturnsOnCall map[int]struct {
		result1 *db.UsedBaseResourceType
	}
	CreatedByResourceCacheStub        func() db.UsedResourceCache
	createdByResourceCacheMutex       sync.RWMutex
	createdByResourceCacheArgsForCall []struct {
	}
	createdByResourceCacheReturns struct {
		result1 db.UsedResourceCache
	}
	createdByResourceCacheReturnsOnCall map[int]struct {
		result1 db.UsedResourceCache
	}
	FindOrCreateScopeStub        func(db.Resource) (db.ResourceConfigScope, error)
	findOrCreateScopeMutex       sync.RWMutex
	findOrCreateScopeArgsForCall []struct {
		arg1 db.Resource
	}
	findOrCreateScopeReturns struct {
		result1 db.ResourceConfigScope
		result2 error
	}
	findOrCreateScopeReturnsOnCall map[int]struct {
		result1 db.ResourceConfigScope
		result2 error
	}
	FindResourceConfigScopeByIDStub        func(int, db.Resource) (db.ResourceConfigScope, bool, error)
	findResourceConfigScopeByIDMutex       sync.RWMutex
	findResourceConfigScopeByIDArgsForCall []struct {
		arg1 int
		arg2 db.Resource
	}
	findResourceConfigScopeByIDReturns struct {
		result1 db.ResourceConfigScope
		result2 bool
		result3 error
	}
	findResourceConfigScopeByIDReturnsOnCall map[int]struct {
		result1 db.ResourceConfigScope
		result2 bool
		result3 error
	}
	IDStub        func() int
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 int
	}
	iDReturnsOnCall map[int]struct {
		result1 int
	}
	OriginBaseResourceTypeStub        func() *db.UsedBaseResourceType
	originBaseResourceTypeMutex       sync.RWMutex
	originBaseResourceTypeArgsForCall []struct {
	}
	originBaseResourceTypeReturns struct {
		result1 *db.UsedBaseResourceType
	}
	originBaseResourceTypeReturnsOnCall map[int]struct {
		result1 *db.UsedBaseResourceType
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceConfig) CreatedByBaseResourceType() *db.UsedBaseResourceType {
	fake.createdByBaseResourceTypeMutex.Lock()
	ret, specificReturn := fake.createdByBaseResourceTypeReturnsOnCall[len(fake.createdByBaseResourceTypeArgsForCall)]
	fake.createdByBaseResourceTypeArgsForCall = append(fake.createdByBaseResourceTypeArgsForCall, struct {
	}{})
	fake.recordInvocation("CreatedByBaseResourceType", []interface{}{})
	fake.createdByBaseResourceTypeMutex.Unlock()
	if fake.CreatedByBaseResourceTypeStub != nil {
		return fake.CreatedByBaseResourceTypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createdByBaseResourceTypeReturns
	return fakeReturns.result1
}

func (fake *FakeResourceConfig) CreatedByBaseResourceTypeCallCount() int {
	fake.createdByBaseResourceTypeMutex.RLock()
	defer fake.createdByBaseResourceTypeMutex.RUnlock()
	return len(fake.createdByBaseResourceTypeArgsForCall)
}

func (fake *FakeResourceConfig) CreatedByBaseResourceTypeCalls(stub func() *db.UsedBaseResourceType) {
	fake.createdByBaseResourceTypeMutex.Lock()
	defer fake.createdByBaseResourceTypeMutex.Unlock()
	fake.CreatedByBaseResourceTypeStub = stub
}

func (fake *FakeResourceConfig) CreatedByBaseResourceTypeReturns(result1 *db.UsedBaseResourceType) {
	fake.createdByBaseResourceTypeMutex.Lock()
	defer fake.createdByBaseResourceTypeMutex.Unlock()
	fake.CreatedByBaseResourceTypeStub = nil
	fake.createdByBaseResourceTypeReturns = struct {
		result1 *db.UsedBaseResourceType
	}{result1}
}

func (fake *FakeResourceConfig) CreatedByBaseResourceTypeReturnsOnCall(i int, result1 *db.UsedBaseResourceType) {
	fake.createdByBaseResourceTypeMutex.Lock()
	defer fake.createdByBaseResourceTypeMutex.Unlock()
	fake.CreatedByBaseResourceTypeStub = nil
	if fake.createdByBaseResourceTypeReturnsOnCall == nil {
		fake.createdByBaseResourceTypeReturnsOnCall = make(map[int]struct {
			result1 *db.UsedBaseResourceType
		})
	}
	fake.createdByBaseResourceTypeReturnsOnCall[i] = struct {
		result1 *db.UsedBaseResourceType
	}{result1}
}

func (fake *FakeResourceConfig) CreatedByResourceCache() db.UsedResourceCache {
	fake.createdByResourceCacheMutex.Lock()
	ret, specificReturn := fake.createdByResourceCacheReturnsOnCall[len(fake.createdByResourceCacheArgsForCall)]
	fake.createdByResourceCacheArgsForCall = append(fake.createdByResourceCacheArgsForCall, struct {
	}{})
	fake.recordInvocation("CreatedByResourceCache", []interface{}{})
	fake.createdByResourceCacheMutex.Unlock()
	if fake.CreatedByResourceCacheStub != nil {
		return fake.CreatedByResourceCacheStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createdByResourceCacheReturns
	return fakeReturns.result1
}

func (fake *FakeResourceConfig) CreatedByResourceCacheCallCount() int {
	fake.createdByResourceCacheMutex.RLock()
	defer fake.createdByResourceCacheMutex.RUnlock()
	return len(fake.createdByResourceCacheArgsForCall)
}

func (fake *FakeResourceConfig) CreatedByResourceCacheCalls(stub func() db.UsedResourceCache) {
	fake.createdByResourceCacheMutex.Lock()
	defer fake.createdByResourceCacheMutex.Unlock()
	fake.CreatedByResourceCacheStub = stub
}

func (fake *FakeResourceConfig) CreatedByResourceCacheReturns(result1 db.UsedResourceCache) {
	fake.createdByResourceCacheMutex.Lock()
	defer fake.createdByResourceCacheMutex.Unlock()
	fake.CreatedByResourceCacheStub = nil
	fake.createdByResourceCacheReturns = struct {
		result1 db.UsedResourceCache
	}{result1}
}

func (fake *FakeResourceConfig) CreatedByResourceCacheReturnsOnCall(i int, result1 db.UsedResourceCache) {
	fake.createdByResourceCacheMutex.Lock()
	defer fake.createdByResourceCacheMutex.Unlock()
	fake.CreatedByResourceCacheStub = nil
	if fake.createdByResourceCacheReturnsOnCall == nil {
		fake.createdByResourceCacheReturnsOnCall = make(map[int]struct {
			result1 db.UsedResourceCache
		})
	}
	fake.createdByResourceCacheReturnsOnCall[i] = struct {
		result1 db.UsedResourceCache
	}{result1}
}

func (fake *FakeResourceConfig) FindOrCreateScope(arg1 db.Resource) (db.ResourceConfigScope, error) {
	fake.findOrCreateScopeMutex.Lock()
	ret, specificReturn := fake.findOrCreateScopeReturnsOnCall[len(fake.findOrCreateScopeArgsForCall)]
	fake.findOrCreateScopeArgsForCall = append(fake.findOrCreateScopeArgsForCall, struct {
		arg1 db.Resource
	}{arg1})
	fake.recordInvocation("FindOrCreateScope", []interface{}{arg1})
	fake.findOrCreateScopeMutex.Unlock()
	if fake.FindOrCreateScopeStub != nil {
		return fake.FindOrCreateScopeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findOrCreateScopeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResourceConfig) FindOrCreateScopeCallCount() int {
	fake.findOrCreateScopeMutex.RLock()
	defer fake.findOrCreateScopeMutex.RUnlock()
	return len(fake.findOrCreateScopeArgsForCall)
}

func (fake *FakeResourceConfig) FindOrCreateScopeCalls(stub func(db.Resource) (db.ResourceConfigScope, error)) {
	fake.findOrCreateScopeMutex.Lock()
	defer fake.findOrCreateScopeMutex.Unlock()
	fake.FindOrCreateScopeStub = stub
}

func (fake *FakeResourceConfig) FindOrCreateScopeArgsForCall(i int) db.Resource {
	fake.findOrCreateScopeMutex.RLock()
	defer fake.findOrCreateScopeMutex.RUnlock()
	argsForCall := fake.findOrCreateScopeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceConfig) FindOrCreateScopeReturns(result1 db.ResourceConfigScope, result2 error) {
	fake.findOrCreateScopeMutex.Lock()
	defer fake.findOrCreateScopeMutex.Unlock()
	fake.FindOrCreateScopeStub = nil
	fake.findOrCreateScopeReturns = struct {
		result1 db.ResourceConfigScope
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfig) FindOrCreateScopeReturnsOnCall(i int, result1 db.ResourceConfigScope, result2 error) {
	fake.findOrCreateScopeMutex.Lock()
	defer fake.findOrCreateScopeMutex.Unlock()
	fake.FindOrCreateScopeStub = nil
	if fake.findOrCreateScopeReturnsOnCall == nil {
		fake.findOrCreateScopeReturnsOnCall = make(map[int]struct {
			result1 db.ResourceConfigScope
			result2 error
		})
	}
	fake.findOrCreateScopeReturnsOnCall[i] = struct {
		result1 db.ResourceConfigScope
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfig) FindResourceConfigScopeByID(arg1 int, arg2 db.Resource) (db.ResourceConfigScope, bool, error) {
	fake.findResourceConfigScopeByIDMutex.Lock()
	ret, specificReturn := fake.findResourceConfigScopeByIDReturnsOnCall[len(fake.findResourceConfigScopeByIDArgsForCall)]
	fake.findResourceConfigScopeByIDArgsForCall = append(fake.findResourceConfigScopeByIDArgsForCall, struct {
		arg1 int
		arg2 db.Resource
	}{arg1, arg2})
	fake.recordInvocation("FindResourceConfigScopeByID", []interface{}{arg1, arg2})
	fake.findResourceConfigScopeByIDMutex.Unlock()
	if fake.FindResourceConfigScopeByIDStub != nil {
		return fake.FindResourceConfigScopeByIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.findResourceConfigScopeByIDReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeResourceConfig) FindResourceConfigScopeByIDCallCount() int {
	fake.findResourceConfigScopeByIDMutex.RLock()
	defer fake.findResourceConfigScopeByIDMutex.RUnlock()
	return len(fake.findResourceConfigScopeByIDArgsForCall)
}

func (fake *FakeResourceConfig) FindResourceConfigScopeByIDCalls(stub func(int, db.Resource) (db.ResourceConfigScope, bool, error)) {
	fake.findResourceConfigScopeByIDMutex.Lock()
	defer fake.findResourceConfigScopeByIDMutex.Unlock()
	fake.FindResourceConfigScopeByIDStub = stub
}

func (fake *FakeResourceConfig) FindResourceConfigScopeByIDArgsForCall(i int) (int, db.Resource) {
	fake.findResourceConfigScopeByIDMutex.RLock()
	defer fake.findResourceConfigScopeByIDMutex.RUnlock()
	argsForCall := fake.findResourceConfigScopeByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeResourceConfig) FindResourceConfigScopeByIDReturns(result1 db.ResourceConfigScope, result2 bool, result3 error) {
	fake.findResourceConfigScopeByIDMutex.Lock()
	defer fake.findResourceConfigScopeByIDMutex.Unlock()
	fake.FindResourceConfigScopeByIDStub = nil
	fake.findResourceConfigScopeByIDReturns = struct {
		result1 db.ResourceConfigScope
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceConfig) FindResourceConfigScopeByIDReturnsOnCall(i int, result1 db.ResourceConfigScope, result2 bool, result3 error) {
	fake.findResourceConfigScopeByIDMutex.Lock()
	defer fake.findResourceConfigScopeByIDMutex.Unlock()
	fake.FindResourceConfigScopeByIDStub = nil
	if fake.findResourceConfigScopeByIDReturnsOnCall == nil {
		fake.findResourceConfigScopeByIDReturnsOnCall = make(map[int]struct {
			result1 db.ResourceConfigScope
			result2 bool
			result3 error
		})
	}
	fake.findResourceConfigScopeByIDReturnsOnCall[i] = struct {
		result1 db.ResourceConfigScope
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceConfig) ID() int {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeResourceConfig) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeResourceConfig) IDCalls(stub func() int) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeResourceConfig) IDReturns(result1 int) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeResourceConfig) IDReturnsOnCall(i int, result1 int) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeResourceConfig) OriginBaseResourceType() *db.UsedBaseResourceType {
	fake.originBaseResourceTypeMutex.Lock()
	ret, specificReturn := fake.originBaseResourceTypeReturnsOnCall[len(fake.originBaseResourceTypeArgsForCall)]
	fake.originBaseResourceTypeArgsForCall = append(fake.originBaseResourceTypeArgsForCall, struct {
	}{})
	fake.recordInvocation("OriginBaseResourceType", []interface{}{})
	fake.originBaseResourceTypeMutex.Unlock()
	if fake.OriginBaseResourceTypeStub != nil {
		return fake.OriginBaseResourceTypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.originBaseResourceTypeReturns
	return fakeReturns.result1
}

func (fake *FakeResourceConfig) OriginBaseResourceTypeCallCount() int {
	fake.originBaseResourceTypeMutex.RLock()
	defer fake.originBaseResourceTypeMutex.RUnlock()
	return len(fake.originBaseResourceTypeArgsForCall)
}

func (fake *FakeResourceConfig) OriginBaseResourceTypeCalls(stub func() *db.UsedBaseResourceType) {
	fake.originBaseResourceTypeMutex.Lock()
	defer fake.originBaseResourceTypeMutex.Unlock()
	fake.OriginBaseResourceTypeStub = stub
}

func (fake *FakeResourceConfig) OriginBaseResourceTypeReturns(result1 *db.UsedBaseResourceType) {
	fake.originBaseResourceTypeMutex.Lock()
	defer fake.originBaseResourceTypeMutex.Unlock()
	fake.OriginBaseResourceTypeStub = nil
	fake.originBaseResourceTypeReturns = struct {
		result1 *db.UsedBaseResourceType
	}{result1}
}

func (fake *FakeResourceConfig) OriginBaseResourceTypeReturnsOnCall(i int, result1 *db.UsedBaseResourceType) {
	fake.originBaseResourceTypeMutex.Lock()
	defer fake.originBaseResourceTypeMutex.Unlock()
	fake.OriginBaseResourceTypeStub = nil
	if fake.originBaseResourceTypeReturnsOnCall == nil {
		fake.originBaseResourceTypeReturnsOnCall = make(map[int]struct {
			result1 *db.UsedBaseResourceType
		})
	}
	fake.originBaseResourceTypeReturnsOnCall[i] = struct {
		result1 *db.UsedBaseResourceType
	}{result1}
}

func (fake *FakeResourceConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createdByBaseResourceTypeMutex.RLock()
	defer fake.createdByBaseResourceTypeMutex.RUnlock()
	fake.createdByResourceCacheMutex.RLock()
	defer fake.createdByResourceCacheMutex.RUnlock()
	fake.findOrCreateScopeMutex.RLock()
	defer fake.findOrCreateScopeMutex.RUnlock()
	fake.findResourceConfigScopeByIDMutex.RLock()
	defer fake.findResourceConfigScopeByIDMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.originBaseResourceTypeMutex.RLock()
	defer fake.originBaseResourceTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceConfig = new(FakeResourceConfig)
